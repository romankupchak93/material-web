{"version":3,"file":"observer_test.js","sourceRoot":"","sources":["observer_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// import 'jasmine'; (google3-only)\n\nimport {observeProperty, setObserversEnabled} from './observer.js';\n\ndescribe('observeProperty()', () => {\n  it('should call Observer when property value changes', () => {\n    const state = {foo: 'value'};\n    const observer = jasmine.createSpy('observer');\n    observeProperty(state, 'foo', observer);\n    // observer should not be called before property changes\n    expect(observer).not.toHaveBeenCalled();\n    state.foo = 'newValue';\n    expect(observer).toHaveBeenCalledOnceWith('newValue', 'value');\n    observer.calls.reset();\n    state.foo = 'newValue';\n    // observer should not be called if property is set to a value that\n    // does not change\n    expect(observer).not.toHaveBeenCalled();\n  });\n\n  it('should stop observing when returned function is called', () => {\n    const state = {foo: 'value'};\n    const observer = jasmine.createSpy('observer');\n    const unobserve = observeProperty(state, 'foo', observer);\n    unobserve();\n    state.foo = 'newValue';\n    // observer should not be called after cleaning up\n    expect(observer).not.toHaveBeenCalled();\n  });\n\n  it('cleanup function does not stop other observers', () => {\n    const state = {foo: 'value', bar: 1};\n    const observer = jasmine.createSpy('observer');\n    const otherObserver = jasmine.createSpy('otherObserver');\n    const unobserve = observeProperty(state, 'foo', observer);\n    observeProperty(state, 'bar', otherObserver);\n    unobserve();\n    state.bar = 2;\n    // other observer should continue to work\n    expect(otherObserver).toHaveBeenCalledOnceWith(2, 1);\n  });\n\n  it('should handle multiple Observers on the same property', () => {\n    const state = {foo: 'value'};\n    const observerOne = jasmine.createSpy('observerOne');\n    const observerTwo = jasmine.createSpy('observerTwo');\n    const unobserveOne = observeProperty(state, 'foo', observerOne);\n    observeProperty(state, 'foo', observerTwo);\n    state.foo = 'newValue';\n    expect(observerOne).toHaveBeenCalledOnceWith('newValue', 'value');\n    expect(observerTwo).toHaveBeenCalledOnceWith('newValue', 'value');\n    unobserveOne();\n    state.foo = 'anotherValue';\n    // First observer should stop listening\n    expect(observerOne).toHaveBeenCalledTimes(1);\n    // Second observer should continue listening\n    expect(observerTwo).toHaveBeenCalledTimes(2);\n    expect(observerTwo).toHaveBeenCalledWith('anotherValue', 'newValue');\n  });\n\n  it('should observe superclass properties', () => {\n    const superClassGetter = jasmine.createSpy('superClassGetter');\n    const superClassSetter = jasmine.createSpy('superClassSetter');\n    class SuperClass {\n      privateProp = false;\n      get prop() {\n        superClassGetter();\n        return this.privateProp;\n      }\n      set prop(prop: boolean) {\n        this.privateProp = prop;\n        superClassSetter();\n      }\n    }\n\n    class SubClass extends SuperClass {}\n\n    const state = new SubClass();\n    const observer = jasmine.createSpy('observer');\n    observeProperty(state, 'prop', observer);\n    state.prop = true;\n    expect(observer).toHaveBeenCalledOnceWith(true, false);\n    // SuperClass getter/setter functionality should be preserved\n    expect(superClassSetter).toHaveBeenCalledTimes(1);\n    superClassGetter.calls.reset();\n    expect(state.prop).toBe(true);\n    expect(superClassGetter).toHaveBeenCalledTimes(1);\n  });\n\n  it('should preserve `this` context in getters/setters', () => {\n    const getter = jasmine.createSpy('getter');\n    const setter = jasmine.createSpy('setter');\n    class TargetClass {\n      privateProp = false;\n      get prop() {\n        getter(this);\n        return this.privateProp;\n      }\n      set prop(prop: boolean) {\n        this.privateProp = prop;\n        setter(this);\n      }\n    }\n\n    const state = new TargetClass();\n    observeProperty(state, 'prop', jasmine.createSpy('observer'));\n    state.prop = true;\n    getter.calls.reset();\n    expect(state.prop).toBe(true);\n    expect(getter)\n        .withContext('`this` in getter should be the instance')\n        .toHaveBeenCalledOnceWith(state);\n    expect(setter)\n        .withContext('`this` in setter should be the instance')\n        .toHaveBeenCalledOnceWith(state);\n  });\n});\n\ndescribe('setObserversEnabled()', () => {\n  it('should disable or enable all observers for a target', () => {\n    const state = {string: 'value', number: 0};\n    const stringObserver = jasmine.createSpy('stringObserver');\n    const numberObserver = jasmine.createSpy('numberObserver');\n    observeProperty(state, 'string', stringObserver);\n    observeProperty(state, 'number', numberObserver);\n    state.string = 'newValue';\n    state.number = 1;\n    stringObserver.calls.reset();\n    numberObserver.calls.reset();\n    // Test disabled\n    setObserversEnabled(state, false);\n    state.string = 'anotherValue';\n    state.number = 2;\n    expect(stringObserver).not.toHaveBeenCalled();\n    expect(numberObserver).not.toHaveBeenCalled();\n    // Test disabled\n    setObserversEnabled(state, true);\n    state.string = 'thirdValue';\n    state.number = 3;\n    expect(stringObserver)\n        .toHaveBeenCalledOnceWith('thirdValue', 'anotherValue');\n    expect(numberObserver).toHaveBeenCalledOnceWith(3, 2);\n  });\n});\n"]}