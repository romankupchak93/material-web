{"version":3,"file":"aria-property_test.js","sourceRoot":"","sources":["aria-property_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// import 'jasmine'; (google3-only)\n\nimport {html, LitElement} from 'lit';\nimport {customElement, property, query} from 'lit/decorators.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\nimport {Environment} from '../../testing/environment.js';\nimport {ariaProperty} from '../aria-property.js';\n\ndescribe('@ariaProperty', () => {\n  const env = new Environment();\n\n  @customElement('my-element')\n  class MyElement extends LitElement {\n    // TODO(b/210730484): replace with @soyParam annotation\n    @property({type: String, attribute: 'data-aria-label', noAccessor: true})\n    @ariaProperty  // tslint:disable-line:no-new-decorators\n    override ariaLabel!: string;\n\n    @query('.root') labelledElement!: HTMLElement;\n\n    override render() {\n      return html`<div class=\"root\"\n        aria-label=${ifDefined(this.ariaLabel)}></div>`;\n    }\n  }\n\n  let element: MyElement;\n\n  beforeEach(async () => {\n    const root = env.render(html`<my-element></my-element>`);\n    await env.waitForStability();\n    element = root.querySelector('my-element') as MyElement;\n  });\n\n  it('should set `ariaX` from `data-*` attribute', () => {\n    const value = 'Aria label';\n    element.setAttribute('data-aria-label', value);\n    expect(element.ariaLabel).toBe(value);\n  });\n\n  it('should set `data-*` attribute from `ariaX`', () => {\n    const value = 'Aria label';\n    element.ariaLabel = value;\n    expect(element.getAttribute('data-aria-label')).toBe(value);\n  });\n\n  it('should remove `data-*` attribute when set to an empty string',\n     async () => {\n       element.ariaLabel = 'Aria label';\n       element.ariaLabel = '';\n       expect(element.hasAttribute('data-aria-label'))\n           .withContext('should not have data-aria-label attribute')\n           .toBeFalse();\n     });\n\n  it('should set `ariaX` from `aria-*` attribute', () => {\n    const value = 'Aria label';\n    element.setAttribute('aria-label', value);\n    expect(element.ariaLabel).toBe(value);\n  });\n\n  it('should remove `aria-*` attribute when set and keep `ariaX` value', () => {\n    const value = 'Aria label';\n    element.setAttribute('aria-label', value);\n    expect(element.hasAttribute('aria-label'))\n        .withContext('should not have aria-label attribute')\n        .toBeFalse();\n    expect(element.ariaLabel).toBe(value);\n  });\n\n  it('should delegate to rendered elements after updateComplete', async () => {\n    const value = 'Aria label';\n    element.ariaLabel = value;\n    await element.updateComplete;\n    expect(element.labelledElement.getAttribute('aria-label')).toBe(value);\n  });\n\n  it('`ariaX` should coerce non-string values to strings', () => {\n    (element as any).ariaLabel = null;\n    expect(element.ariaLabel).withContext('null should coerce to \"\"').toBe('');\n\n    (element as any).ariaLabel = undefined;\n    expect(element.ariaLabel)\n        .withContext('undefined should coerce to \"\"')\n        .toBe('');\n\n    (element as any).ariaLabel = 42;\n    expect(element.ariaLabel)\n        .withContext('number should coerce to string')\n        .toBe('42');\n\n    (element as any).ariaLabel = true;\n    expect(element.ariaLabel)\n        .withContext('boolean should coerce to string')\n        .toBe('true');\n  });\n});\n"]}