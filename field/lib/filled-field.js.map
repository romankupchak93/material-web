{"version":3,"file":"filled-field.js","sourceRoot":"","sources":["filled-field.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAC,IAAI,EAAiB,MAAM,KAAK,CAAC;AACzC,OAAO,EAAC,KAAK,EAAC,MAAM,mBAAmB,CAAC;AACxC,OAAO,EAAC,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AAErD,OAAO,EAAC,KAAK,EAAC,MAAM,YAAY,CAAC;AAEjC;;GAEG;AACH,MAAM,OAAO,WAAY,SAAQ,KAAK;IAGpC;QACE,KAAK,EAAE,CAAC;QAHO,0BAAqB,GAAG,EAAE,CAAC;QAoC3B,gBAAW,GAAG,CAAC,KAA4B,EAAE,EAAE;YAC9D,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO;aACR;YAED,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC,CAAC;QAtCA,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACnD,CAAC;IAEkB,MAAM,CAAC,KAAkC;QAC1D,0EAA0E;QAC1E,uCAAuC;QACvC,MAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QACzD,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,2BAA2B,EAAE,CAAC;SACpC;QAED,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC;IAEkB,uBAAuB;QACxC,MAAM,WAAW,GAAG,EAAC,eAAe,EAAE,IAAI,CAAC,qBAAqB,EAAC,CAAC;QAClE,OAAO,IAAI,CAAA;;QAEP,KAAK,CAAC,uBAAuB,EAAE;;iBAEtB,QAAQ,CAAC,WAAW,CAAC;KACjC,CAAC;IACJ,CAAC;IAEkB,oBAAoB;QACrC,OAAO,IAAI,CAAA;QACP,IAAI,CAAC,mBAAmB,EAAE;QAC1B,IAAI,CAAC,kBAAkB,EAAE;QACzB,KAAK,CAAC,oBAAoB,EAAE;KAC/B,CAAC;IACJ,CAAC;IAUO,2BAA2B,CAAC,KAA6B;QAC/D,IAAI,eAAe,GAAG,EAAE,CAAC;QACzB,IAAI,KAAK,EAAE;YACT,qEAAqE;YACrE,wBAAwB;YACxB,MAAM,YAAY,GAAG,SAAS,IAAI,KAAK,CAAC;YACxC,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;YACvE,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC9C,eAAe,GAAG,GAAG,MAAM,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC;SAC9C;QAED,IAAI,CAAC,qBAAqB,GAAG,eAAe,CAAC;IAC/C,CAAC;CACF;AAzDU;IAAR,KAAK,EAAE;;0DAAoC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, PropertyValues} from 'lit';\nimport {state} from 'lit/decorators.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\nimport {Field} from './field.js';\n\n/**\n * A filled field component.\n */\nexport class FilledField extends Field {\n  @state() private strokeTransformOrigin = '';\n\n  constructor() {\n    super();\n    this.addEventListener('click', this.handleClick);\n  }\n\n  protected override update(props: PropertyValues<FilledField>) {\n    // Upon losing focus, the stroke resets to expanding from the center, such\n    // as when re-focusing with a keyboard.\n    const unfocusing = props.has('focused') && !this.focused;\n    if (unfocusing) {\n      this.updateStrokeTransformOrigin();\n    }\n\n    super.update(props);\n  }\n\n  protected override renderContainerContents() {\n    const strokeStyle = {transformOrigin: this.strokeTransformOrigin};\n    return html`\n      <span class=\"state-layer\"></span>\n      ${super.renderContainerContents()}\n      <span class=\"active-indicator\"\n        style=\"${styleMap(strokeStyle)}\"></span>\n    `;\n  }\n\n  protected override renderMiddleContents() {\n    return html`\n      ${this.renderFloatingLabel()}\n      ${this.renderRestingLabel()}\n      ${super.renderMiddleContents()}\n    `;\n  }\n\n  private readonly handleClick = (event: MouseEvent|TouchEvent) => {\n    if (this.disabled) {\n      return;\n    }\n\n    this.updateStrokeTransformOrigin(event);\n  };\n\n  private updateStrokeTransformOrigin(event?: MouseEvent|TouchEvent) {\n    let transformOrigin = '';\n    if (event) {\n      // Can't use instanceof TouchEvent since Firefox does not provide the\n      // constructor globally.\n      const isTouchEvent = 'touches' in event;\n      const eventX = isTouchEvent ? event.touches[0].clientX : event.clientX;\n      const rootRect = this.getBoundingClientRect();\n      transformOrigin = `${eventX - rootRect.x}px`;\n    }\n\n    this.strokeTransformOrigin = transformOrigin;\n  }\n}\n"]}