{"version":3,"file":"filled-field_test.js","sourceRoot":"","sources":["filled-field_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,mCAAmC;AAEnC,OAAO,EAAC,IAAI,EAAC,MAAM,KAAK,CAAC;AACzB,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAC,WAAW,EAAC,MAAM,8BAA8B,CAAC;AACzD,OAAO,EAAC,YAAY,EAAC,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAC,WAAW,EAAC,MAAM,mBAAmB,CAAC;AAS9C,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,WAAW;IACvC,IAAI,yBAAyB;QAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QACnE,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,EAAE,CAAC;SACX;QAED,OAAO,gBAAgB,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC;CACF,CAAA;AATK,eAAe;IADpB,aAAa,CAAC,sBAAsB,CAAC;GAChC,eAAe,CASpB;AAED,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;IACrB,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,MAAM,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC;QAE9B,KAAK,UAAU,SAAS,CAAC,QAA8B,EAAE;YACvD,gDAAgD;YAChD,MAAM,QAAQ,GAAG,IAAI,CAAA;;mBAER,KAAK,CAAC,KAAK;sBACR,KAAK,CAAC,QAAQ,IAAI,KAAK;mBAC1B,KAAK,CAAC,KAAK,IAAI,KAAK;uBAChB,KAAK,CAAC,SAAS,IAAI,KAAK;sBACzB,KAAK,CAAC,QAAQ,IAAI,KAAK;;;;OAItC,CAAC;YACF,MAAM,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;YAC5D,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;aACrE;YAED,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAC7B,OAAO;gBACL,QAAQ;gBACR,OAAO,EAAE,IAAI,YAAY,CAAC,QAAQ,CAAC;aACpC,CAAC;QACJ,CAAC;QAED,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;YACtC,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;gBACpE,UAAU;gBACV,MAAM,EAAC,QAAQ,EAAE,OAAO,EAAC,GAAG,MAAM,SAAS,EAAE,CAAC;gBAC9C,MAAM,QAAQ,GAAG,IAAI,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;gBAC5C,KAAK,CAAC,QAAQ,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;gBACnE,aAAa;gBACb,MAAM,OAAO,GAAG,EAAE,CAAC;gBACnB,MAAM,OAAO,CAAC,cAAc,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;gBACxC,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBAC7B,aAAa;gBACb,MAAM,CAAC,QAAQ,CAAC,yBAAyB,CAAC;qBACrC,WAAW,CAAC,4BACT,OAAO,qBAAqB,QAAQ,CAAC,CAAC,GAAG,CAAC;qBAC7C,IAAI,CAAC,GAAG,OAAO,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;gBAC3D,UAAU;gBACV,MAAM,EAAC,QAAQ,EAAE,OAAO,EAAC,GAAG,MAAM,SAAS,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC9D,aAAa;gBACb,MAAM,OAAO,CAAC,cAAc,CAAC,EAAC,OAAO,EAAE,EAAE,EAAC,CAAC,CAAC;gBAC5C,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBAC7B,aAAa;gBACb,MAAM,CAAC,QAAQ,CAAC,yBAAyB,CAAC;qBACrC,WAAW,CAAC,kDAAkD,CAAC;qBAC/D,IAAI,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;gBAC9C,UAAU;gBACV,MAAM,EAAC,QAAQ,EAAE,OAAO,EAAC,GAAG,MAAM,SAAS,EAAE,CAAC;gBAC9C,MAAM,OAAO,CAAC,cAAc,CAAC,EAAC,OAAO,EAAE,EAAE,EAAC,CAAC,CAAC;gBAC5C,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBAC7B,MAAM,CAAC,QAAQ,CAAC,yBAAyB,CAAC;qBACrC,WAAW,CAAC,wCAAwC,CAAC;qBACrD,UAAU,EAAE,CAAC;gBAElB,MAAM,OAAO,CAAC,iBAAiB,EAAE,CAAC;gBAClC,aAAa;gBACb,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;gBACrB,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBAC7B,aAAa;gBACb,MAAM,CAAC,QAAQ,CAAC,yBAAyB,CAAC;qBACrC,WAAW,CAAC,6CAA6C,CAAC;qBAC1D,IAAI,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// import 'jasmine'; (google3-only)\n\nimport {html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {Environment} from '../../testing/environment.js';\nimport {FieldHarness} from '../harness.js';\n\nimport {FilledField} from './filled-field.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'md-test-filled-field': TestFilledField;\n  }\n}\n\n@customElement('md-test-filled-field')\nclass TestFilledField extends FilledField {\n  get strokeTransformOriginProp() {\n    const element = this.renderRoot.querySelector('.active-indicator');\n    if (!element) {\n      return '';\n    }\n\n    return getComputedStyle(element).transformOrigin.split(' ')[0];\n  }\n}\n\ndescribe('Field', () => {\n  describe('<md-filled-field>', () => {\n    const env = new Environment();\n\n    async function setupTest(props: Partial<FilledField> = {}) {\n      // Variant type does not matter for shared tests\n      const template = html`\n        <md-test-filled-field\n          .label=${props.label}\n          ?disabled=${props.disabled ?? false}\n          .error=${props.error ?? false}\n          .populated=${props.populated ?? false}\n          .required=${props.required ?? false}\n        >\n          <input>\n        </md-test-filled-field>\n      `;\n      const root = env.render(template);\n      const instance = root.querySelector('md-test-filled-field');\n      if (!instance) {\n        throw new Error('Could not query rendered <md-test-filled-field>.');\n      }\n\n      await env.waitForStability();\n      return {\n        instance,\n        harness: new FieldHarness(instance),\n      };\n    }\n\n    describe('.strokeTransformOrigin', () => {\n      it('should be set to eventClientX - rootClientX on click', async () => {\n        // Set up.\n        const {instance, harness} = await setupTest();\n        const rootRect = new DOMRect(5, 5, 200, 56);\n        spyOn(instance, 'getBoundingClientRect').and.returnValue(rootRect);\n        // Test case.\n        const clientX = 10;\n        await harness.clickWithMouse({clientX});\n        await env.waitForStability();\n        // Assertion.\n        expect(instance.strokeTransformOriginProp)\n            .withContext(`should be event.clientX (${\n                clientX}) - root.clientX (${rootRect.x})`)\n            .toBe(`${clientX - rootRect.x}px`);\n      });\n\n      it('should not update when disabled and clicked', async () => {\n        // Set up.\n        const {instance, harness} = await setupTest({disabled: true});\n        // Test case.\n        await harness.clickWithMouse({clientX: 10});\n        await env.waitForStability();\n        // Assertion.\n        expect(instance.strokeTransformOriginProp)\n            .withContext('should not update stroke transform when disabled')\n            .toBe('0px');\n      });\n\n      it('should be reset when unfocused', async () => {\n        // Set up.\n        const {instance, harness} = await setupTest();\n        await harness.clickWithMouse({clientX: 10});\n        await env.waitForStability();\n        expect(instance.strokeTransformOriginProp)\n            .withContext('should have a pre-set transform origin')\n            .toBeTruthy();\n\n        await harness.focusWithKeyboard();\n        // Test case.\n        await harness.blur();\n        await env.waitForStability();\n        // Assertion.\n        expect(instance.strokeTransformOriginProp)\n            .withContext('should rest stroke transform when unfocused')\n            .toBe('0px');\n      });\n    });\n  });\n});\n"]}