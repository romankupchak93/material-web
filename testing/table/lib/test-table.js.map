{"version":3,"file":"test-table.js","sourceRoot":"","sources":["test-table.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAAC,UAAU,EAAE,MAAM,EAAiB,MAAM,KAAK,CAAC;AACvD,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC3C,OAAO,EAAY,QAAQ,EAAC,MAAM,6BAA6B,CAAC;AAChE,OAAO,EAAC,KAAK,EAAC,MAAM,yBAAyB,CAAC;AAC9C,OAAO,EAAC,IAAI,EAAU,MAAM,oBAAoB,CAAC;AAgBjD,qBAAqB;AACrB,MAAM,OAAO,SAAqC,SAAQ,UAAU;IAApE;;QAGqC,UAAK,GAAG,OAAO,CAAC;QAC1B,WAAM,GAAQ,EAAE,CAAC;QACjB,cAAS,GAAgC,EAAE,CAAC;QAC1C,SAAI,GAAG,KAAK,CAAC;IAuE1C,CAAC;IArEC,mBAAmB;IACA,MAAM;QACvB,OAAO,IAAI,CAAA;qCACsB,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;;;;cAIxD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAA;mDACQ,KAAK;aAC3C,CAAC;;;;YAIF,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;;kDAE5B,IAAI,CAAC,KAAK;;KAEvD,CAAC;IACJ,CAAC;IAED,mBAAmB;IACT,gBAAgB;QACxB,OAAO;YACL,sBAAsB,EAAE,IAAI,CAAC,IAAI;SAClC,CAAC;IACJ,CAAC;IAED,mBAAmB;IACT,eAAe;QACvB,8DAA8D;QAC9D,MAAM,CACF,IAAI,CAAC,SAAS,CAAC,GAAG,CACd,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;YAC1D,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5C,MAAM,eAAe,GAAG,YAAY,KAAK,IAAI,CAAC;YAC9C,OAAO,eAAe,CAAC,CAAC,CAAC,IAAI,CAAA,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;6BACvB,GAAG,QAAQ,IAAI,QAAQ,EAAE;oBAClC,YAAY;uBACT,CAAC;QACZ,CAAC,CAAC,CAAC,EACP,IAAI,CAAC,CAAC;QAEV,OAAO,IAAI,CAAA;QACP,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAA;;;cAGzC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC;;YAEvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAA;;4BAEzB,GAAG,QAAQ,IAAI,QAAQ,EAAE;;;;WAI1C,CAAC;;OAEL,CAAC;KACH,CAAC;IACJ,CAAC;IAED,yDAAyD;IACjD,cAAc,CAAC,OAAqC;QAC1D,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,OAAO,OAAO,CAAC;SAChB;QAED,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACtD,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC;;AA3Ee,2BAAiB,GAAmB,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;AAEzC;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;;wCAA0B;AAC1B;IAAxB,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;;yCAAkB;AACjB;IAAxB,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;8BAAY,KAAK;4CAA4B;AAC1C;IAA1B,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;;uCAAc","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement, render, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\nimport {guard} from 'lit/directives/guard.js';\nimport {html, literal} from 'lit/static-html.js';\n\n/** Test table interface. */\nexport interface TestTableTemplate<S extends string = string> {\n  /** The row display name. May be a Lit static value for rich HTML. */\n  display: string|ReturnType<typeof literal>;\n  /**\n   * A template's render function. It accepts a state string (the column) and\n   * returns a Lit `TemplateResult`.\n   *\n   * @param state The current state to render in.\n   * @return A `TemplateResult` for the given state.\n   */\n  render(state: S): TemplateResult|null;\n}\n\n/** @soyCompatible */\nexport class TestTable<S extends string = string> extends LitElement {\n  static override shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  @property({type: String}) override title = 'Title';\n  @property({type: Array}) states: S[] = [];\n  @property({type: Array}) templates: Array<TestTableTemplate<S>> = [];\n  @property({type: Boolean}) dark = false;\n\n  /** @soyTemplate */\n  protected override render(): TemplateResult {\n    return html`\n      <table class=\"md3-test-table ${classMap(this.getRenderClasses())}\">\n        <thead>\n          <tr>\n            <th class=\"md3-test-table__header\"></th>\n            ${this.states.map(state => html`\n              <th class=\"md3-test-table__header\">${state}</th>\n            `)}\n          </tr>\n        </thead>\n        <tbody>\n          ${guard([this.templates, this.states], () => this.renderTemplates())}\n        </tbody>\n        <caption class=\"md3-test-table__header\">${this.title}</caption>\n      </table>\n    `;\n  }\n\n  /** @soyTemplate */\n  protected getRenderClasses(): ClassInfo {\n    return {\n      'md3-test-table--dark': this.dark,\n    };\n  }\n\n  /** @soyTemplate */\n  protected renderTemplates(): TemplateResult {\n    // Render templates in the light DOM for easier styling access\n    render(\n        this.templates.map(\n            (template, rowIndex) => this.states.map((state, colIndex) => {\n              const renderResult = template.render(state);\n              const isEmptyTemplate = renderResult === null;\n              return isEmptyTemplate ? html`` : html`\n                <div slot=\"${`${rowIndex}-${colIndex}`}\">\n                  ${renderResult}\n                </div>`;\n            })),\n        this);\n\n    return html`\n      ${this.templates.map((template, rowIndex) => html`\n        <tr>\n          <th class=\"md3-test-table__header\">\n            ${this.getVariantName(template.display)}\n          </th>\n          ${this.states.map((state, colIndex) => html`\n            <td class=\"md3-test-table__cell\">\n              <slot name=\"${`${rowIndex}-${colIndex}`}\">\n                <div class=\"md3-test-table__text\">N/A</div>\n              </slot>\n            </td>\n          `)}\n        </tr>\n      `)}\n    `;\n  }\n\n  /** Convert the name from camel case to sentence case. */\n  private getVariantName(display: TestTableTemplate['display']) {\n    if (typeof display !== 'string') {\n      return display;\n    }\n\n    const withSpaces = display.replace(/([A-Z])/g, ' $1');\n    return withSpaces[0].toUpperCase() + withSpaces.slice(1);\n  }\n}\n"]}