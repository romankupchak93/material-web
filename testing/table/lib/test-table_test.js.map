{"version":3,"file":"test-table_test.js","sourceRoot":"","sources":["test-table_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,iBAAiB,CAAC;AAEzB,OAAO,EAAC,IAAI,EAAC,MAAM,KAAK,CAAC;AACzB,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAC,WAAW,EAAC,MAAM,sBAAsB,CAAC;AAEjD,OAAO,EAAC,SAAS,EAAoB,MAAM,iBAAiB,CAAC;AAS7D,IAAM,aAAa,GAAnB,MAAM,aAAyC,SAAQ,SAAY;CAClE,CAAA;AADK,aAAa;IADlB,aAAa,CAAC,iBAAiB,CAAC;GAC3B,aAAa,CAClB;AAED,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,MAAM,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC;IAE9B,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,SAAS,GAAG;YAChB,OAAO,EAAE,WAAW;YACpB,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,CAAA,EAAE,CAAC;SAClE,CAAC;QACF,MAAM,SAAS,GAAG;YAChB,OAAO,EAAE,WAAW;YACpB,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,CAAA,EAAE,CAAC;SAClE,CAAC;QACF,MAAM,SAAS,GAAG,CAAC,SAAS,EAAE,SAAS,CAAwB,CAAC;QAChE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAA;;kBAED,CAAC,GAAG,EAAE,GAAG,CAAC;qBACP,SAAS;KACzB,CAAC,CAAC;QAEH,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC7B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport './test-table.js';\n\nimport {html} from 'lit';\nimport {customElement} from 'lit/decorators.js';\n\nimport {Environment} from '../../environment.js';\n\nimport {TestTable, TestTableTemplate} from './test-table.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'test-test-table': TestTestTable;\n  }\n}\n\n@customElement('test-test-table')\nclass TestTestTable<S extends string = string> extends TestTable<S> {\n}\n\ndescribe('<test-test-table>', () => {\n  const env = new Environment();\n\n  it('should call template functions with each state', async () => {\n    const template1 = {\n      display: 'template1',\n      render: jasmine.createSpy('template1').and.callFake(() => html``),\n    };\n    const template2 = {\n      display: 'template2',\n      render: jasmine.createSpy('template2').and.callFake(() => html``),\n    };\n    const templates = [template1, template2] as TestTableTemplate[];\n    env.render(html`\n      <test-test-table\n        .states=${['A', 'B']}\n        .templates=${templates}></test-test-table>\n    `);\n\n    await env.waitForStability();\n    expect(template1.render).toHaveBeenCalledTimes(2);\n    expect(template1.render.calls.argsFor(0)).toEqual(['A']);\n    expect(template1.render.calls.argsFor(1)).toEqual(['B']);\n    expect(template2.render).toHaveBeenCalledTimes(2);\n    expect(template2.render.calls.argsFor(0)).toEqual(['A']);\n    expect(template2.render.calls.argsFor(1)).toEqual(['B']);\n  });\n});\n"]}