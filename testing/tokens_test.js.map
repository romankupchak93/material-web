{"version":3,"file":"tokens_test.js","sourceRoot":"","sources":["tokens_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,mCAAmC;AAEnC,OAAO,EAAC,GAAG,EAAC,MAAM,KAAK,CAAC;AAExB,OAAO,EAAC,kBAAkB,EAAE,eAAe,EAAC,MAAM,aAAa,CAAC;AAEhE,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;YACjC,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;gBACtD,MAAM,MAAM,GAAG,GAAG,CAAA;;;;;;;;SAQjB,CAAC;gBAEF,MAAM,YAAY,GAAG,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC/C,MAAM,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAClE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;gBAC7D,MAAM,MAAM,GAAG,GAAG,CAAA;;;;;;;;;SASjB,CAAC;gBAEF,MAAM,YAAY,GAAG,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC/C,MAAM,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC;oBACxD,WAAW;iBACZ,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;YACpC,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;gBACzD,MAAM,MAAM,GAAG,GAAG,CAAA;;;;;;;;SAQjB,CAAC;gBAEF,MAAM,eAAe,GAAG,kBAAkB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACrD,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;gBAC5D,MAAM,MAAM,GAAG,GAAG,CAAA;;;;;;;;;SASjB,CAAC;gBAEF,MAAM,eAAe,GAAG,kBAAkB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACrD,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC;oBAC9D,cAAc;iBACf,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// import 'jasmine'; (google3-only)\n\nimport {css} from 'lit';\n\nimport {getUndefinedTokens, getUnusedTokens} from './tokens.js';\n\ndescribe('testing', () => {\n  describe('tokens', () => {\n    describe('getUnusedTokens()', () => {\n      it('should return empty when all tokens are used', () => {\n        const styles = css`\n          :host {\n            --_color: var(--md-comp-foo-color);\n          }\n\n          .foo {\n            color: var(--_color);\n          }\n        `;\n\n        const unusedTokens = getUnusedTokens([styles]);\n        expect(unusedTokens).withContext('unused tokens').toHaveSize(0);\n      });\n\n      it('should return tokens that are defined, but not used', () => {\n        const styles = css`\n          :host {\n            --_color: var(--md-comp-foo-color);\n            --_unused: var(--md-comp-foo-unused);\n          }\n\n          .foo {\n            color: var(--_color);\n          }\n        `;\n\n        const unusedTokens = getUnusedTokens([styles]);\n        expect(unusedTokens).withContext('unused tokens').toEqual([\n          '--_unused'\n        ]);\n      });\n    });\n\n    describe('getUndefinedTokens()', () => {\n      it('should return empty when all tokens are defined', () => {\n        const styles = css`\n          :host {\n            --_color: var(--md-comp-foo-color);\n          }\n\n          .foo {\n            color: var(--_color);\n          }\n        `;\n\n        const undefinedTokens = getUndefinedTokens([styles]);\n        expect(undefinedTokens).withContext('undefined tokens').toHaveSize(0);\n      });\n\n      it('should return tokens that are used and not defined', () => {\n        const styles = css`\n          :host {\n            --_color: var(--md-comp-foo-color);\n          }\n\n          .foo {\n            color: var(--_color);\n            border-radius: var(--_undefined);\n          }\n        `;\n\n        const undefinedTokens = getUndefinedTokens([styles]);\n        expect(undefinedTokens).withContext('undefined tokens').toEqual([\n          '--_undefined'\n        ]);\n      });\n    });\n  });\n});\n"]}