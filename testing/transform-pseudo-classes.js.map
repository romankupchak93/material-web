{"version":3,"file":"transform-pseudo-classes.js","sourceRoot":"","sources":["transform-pseudo-classes.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Array of pseudo classes to transform by default. These pseudo classes\n * represent state interactions from the user (such as :hover) or the browser\n * (such as :autofill) that cannot be reproduced with HTML markup.\n */\nexport const defaultTransformPseudoClasses = [\n  ':active',\n  ':autofill',\n  ':focus',\n  ':focus-visible',\n  ':focus-within',\n  ':hover',\n  ':invalid',\n  ':link',\n  ':paused',\n  ':playing',\n  ':user-invalid',\n  ':valid',\n  ':visited',\n];\n\n/**\n * Retrieves the transformed class name for a given pseudo class.\n *\n * @param pseudoClass The pseudo class to transform.\n * @return The transform pseudo class string.\n */\nexport function getTransformedPseudoClass(pseudoClass: string) {\n  return `_${pseudoClass.substring(1)}`;\n}\n\n/**\n * A weak set of stylesheets to use as reference for whether or not a stylesheet\n * has been transformed.\n */\nconst transformedStyleSheets = new WeakSet<CSSStyleSheet>();\n\n/**\n * Transforms a document's stylesheets' pseudo classes into normal classes with\n * a new stylesheet.\n *\n * Pseudo classes are given an underscore in their transformation. For example,\n * `:hover` transforms to `._hover`.\n *\n * ```css\n * .mdc-foo:hover {\n *   color: teal;\n * }\n * ```\n * ```css\n * .mdc-foo._hover {\n *   color: teal;\n * }\n * ```\n *\n * @param pseudoClasses An optional array of pseudo class names to transform.\n */\nexport function transformPseudoClasses(\n    stylesheets: Iterable<CSSStyleSheet>,\n    pseudoClasses = defaultTransformPseudoClasses) {\n  for (const stylesheet of stylesheets) {\n    if (transformedStyleSheets.has(stylesheet)) {\n      continue;\n    }\n\n    let rules: CSSRuleList;\n    try {\n      rules = stylesheet.cssRules;\n    } catch {\n      continue;\n    }\n\n    for (let j = rules.length - 1; j >= 0; j--) {\n      visitRule(rules[j], stylesheet, j, pseudoClasses);\n    }\n\n    transformedStyleSheets.add(stylesheet);\n  }\n}\n\n/**\n * Visits a rule for the given stylesheet and adds a rule that replaces any\n * pseudo classes with a regular transformed class for simulation styling.\n *\n * @param rule The CSS rule to transform.\n * @param stylesheet The rule's parent stylesheet to update.\n * @param index The index of the rule in the parent stylesheet.\n * @param pseudoClasses An array of pseudo classes to search for and replace.\n */\nfunction visitRule(\n    rule: CSSRule, stylesheet: CSSStyleSheet|CSSGroupingRule, index: number,\n    pseudoClasses: string[]) {\n  if (rule instanceof CSSMediaRule || rule instanceof CSSSupportsRule) {\n    for (let i = rule.cssRules.length - 1; i >= 0; i--) {\n      visitRule(rule.cssRules[i], rule, i, pseudoClasses);\n    }\n    return;\n  }\n\n  if (!(rule instanceof CSSStyleRule)) {\n    return;\n  }\n\n  try {\n    let {selectorText} = rule;\n    // match :foo, ensuring it does not have an extra colon behind it\n    // (no pseudo elements like ::foo) and it does not have a parens in front\n    // of it (no pseudo class functions like :foo())\n    const regex = /(?<!:)(:(?![\\w-]+\\()[\\w-]+)/g;\n    const matches = Array.from(selectorText.matchAll(regex)).filter(match => {\n      return pseudoClasses.includes(match[1]);\n    });\n\n    if (!matches.length) {\n      return;\n    }\n\n    matches.reverse();\n    selectorText = rearrangePseudoElements(selectorText);\n    for (const match of matches) {\n      selectorText = selectorText.substring(0, match.index!) +\n          `.${getTransformedPseudoClass(match[1])}` +\n          selectorText.substring(match.index! + match[1].length);\n    }\n\n    const css = `${selectorText} {${rule.style.cssText}}`;\n    stylesheet.insertRule(css, index + 1);\n  } catch (error: unknown) {\n    // Catch exception to skip the rule that cannot be parsed.\n    console.error(error);\n  }\n}\n\n/**\n * Re-arranges a selector's pseudo elements to appear at the end of the\n * selector. This prevents invalid CSS when replacing pseudo classes that\n * appear after a pseudo element.\n *\n * @example\n * // '.foo::before:hover' -> '.foo::before._hover' is invalid\n *\n * rearrangePseudoElements('.foo::before:hover'); // '.foo:hover::before'\n * // '.foo:hover::before' -> '.foo._hover::before' is valid\n *\n * @param selectorText The selector text string to re-arrange.\n * @return The re-arranged selector text.\n */\nfunction rearrangePseudoElements(selectorText: string) {\n  const pseudoElementsBeforeClasses =\n      Array.from(selectorText.matchAll(/(?:::[\\w-]+)+(?=:[\\w-])/g));\n  pseudoElementsBeforeClasses.reverse();\n  for (const match of pseudoElementsBeforeClasses) {\n    const pseudoElement = match[0];\n    const pseudoElementIndex = match.index!;\n    const endOfCompoundSelector = selectorText.substring(pseudoElementIndex)\n                                      .match(/(\\s(?!([^\\s].)*\\))|,|$)/)!;\n    const index = endOfCompoundSelector.index! + pseudoElementIndex;\n    selectorText = selectorText.substring(0, index) + pseudoElement +\n        selectorText.substring(index);\n    selectorText = selectorText.substring(0, pseudoElementIndex) +\n        selectorText.substring(pseudoElementIndex + pseudoElement.length);\n  }\n\n  return selectorText;\n}\n"]}