{"version":3,"file":"harness_test.js","sourceRoot":"","sources":["harness_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,mCAAmC;AACnC,OAAO,wBAAwB,CAAC;AAEhC,OAAO,EAAC,IAAI,EAAC,MAAM,KAAK,CAAC;AAEzB,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAC,OAAO,EAAC,MAAM,uBAAuB,CAAC;AAE9C,OAAO,EAAC,gBAAgB,EAAC,MAAM,cAAc,CAAC;AAE9C,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,MAAM,GAAG,GAAG,IAAI,WAAW,EAAE,CAAC;IAE9B,KAAK,UAAU,SAAS;QACtB,MAAM,IAAI,GACN,GAAG,CAAC,MAAM,CAAC,IAAI,CAAA,+CAA+C,CAAC,CAAC;QACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;QAC5D,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC1D;QAED,MAAM,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC7B,OAAO,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,MAAM,cAAc,GAAG,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YAC3D,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;YAC5D,aAAa;YACb,MAAM,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAChC,aAAa;YACb,MAAM,CAAC,cAAc,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;YACxE,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC;gBAC7C,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;gBACtC,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;gBACtC,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;aACvC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACvD,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YACxD,aAAa;YACb,MAAM,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAChC,aAAa;YACb,MAAM,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,MAAM,cAAc,GAAG,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YAC3D,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;YAC5D,OAAO,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;YAChC,aAAa;YACb,MAAM,OAAO,CAAC,WAAW,EAAE,CAAC;YAC5B,aAAa;YACb,MAAM,CAAC,cAAc,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;YACxE,MAAM,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,OAAO,CAAC,gBAAgB,CAAC;gBACnE,GAAG,EAAE,WAAW;aACjB,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,OAAO,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;YAChC,aAAa;YACb,MAAM,OAAO,CAAC,WAAW,EAAE,CAAC;YAC5B,aAAa;YACb,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,OAAO,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;YAChC,aAAa;YACb,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAChC,aAAa;YACb,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,OAAO,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;YAChC,aAAa;YACb,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;YACtB,aAAa;YACb,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACzC,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAClC,aAAa;YACb,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;YACtB,aAAa;YACb,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,8DAA8D,EAC9D,KAAK,IAAI,EAAE;YACT,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACzD,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YAC1D,aAAa;YACb,MAAM,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAClC,MAAM,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAClC,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,aAAa;YACb,MAAM,CAAC,aAAa,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEN,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACzD,OAAO,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;YAChC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YAC1D,aAAa;YACb,MAAM,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAClC,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,aAAa;YACb,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,SAAS;YACT,MAAM,OAAO,GAAG,MAAM,SAAS,EAAE,CAAC;YAClC,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;YACzD,MAAM,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAClC,MAAM,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAClC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YAC1D,aAAa;YACb,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;YACrB,aAAa;YACb,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// import 'jasmine'; (google3-only)\nimport './filled-text-field.js';\n\nimport {html} from 'lit';\n\nimport {Environment} from '../testing/environment.js';\nimport {Harness} from '../testing/harness.js';\n\nimport {TextFieldHarness} from './harness.js';\n\ndescribe('TextFieldHarness', () => {\n  const env = new Environment();\n\n  async function setupTest() {\n    const root =\n        env.render(html`<md-filled-text-field></md-filled-text-field>`);\n    const instance = root.querySelector('md-filled-text-field');\n    if (!instance) {\n      throw new Error('Failed to query md-filled-text-field.');\n    }\n\n    await env.waitForStability();\n    return new TextFieldHarness(instance);\n  }\n\n  describe('inputValue()', () => {\n    it('should emit key events for each character typed', async () => {\n      // Setup.\n      const harness = await setupTest();\n      const keydownHandler = jasmine.createSpy('keydownHandler');\n      harness.element.addEventListener('keydown', keydownHandler);\n      // Test case.\n      await harness.inputValue('abc');\n      // Assertion.\n      expect(keydownHandler).toHaveBeenCalledTimes(3);\n      expect(keydownHandler).toHaveBeenCalledWith(jasmine.any(KeyboardEvent));\n      expect(keydownHandler.calls.allArgs()).toEqual([\n        [jasmine.objectContaining({key: 'a'})],\n        [jasmine.objectContaining({key: 'b'})],\n        [jasmine.objectContaining({key: 'c'})],\n      ]);\n    });\n\n    it('should emit input events for each character typed', async () => {\n      // Setup.\n      const harness = await setupTest();\n      const inputHandler = jasmine.createSpy('inputHandler');\n      harness.element.addEventListener('input', inputHandler);\n      // Test case.\n      await harness.inputValue('abc');\n      // Assertion.\n      expect(inputHandler).toHaveBeenCalledTimes(3);\n      expect(inputHandler).toHaveBeenCalledWith(jasmine.any(InputEvent));\n    });\n  });\n\n  describe('deleteValue()', () => {\n    it('should press the Backspace key', async () => {\n      // Setup.\n      const harness = await setupTest();\n      const keydownHandler = jasmine.createSpy('keydownHandler');\n      harness.element.addEventListener('keydown', keydownHandler);\n      harness.element.value = 'Value';\n      // Test case.\n      await harness.deleteValue();\n      // Assertion.\n      expect(keydownHandler).toHaveBeenCalledTimes(1);\n      expect(keydownHandler).toHaveBeenCalledWith(jasmine.any(KeyboardEvent));\n      expect(keydownHandler).toHaveBeenCalledWith(jasmine.objectContaining({\n        key: 'Backspace'\n      }));\n    });\n\n    it('should delete the entire value by default', async () => {\n      // Setup.\n      const harness = await setupTest();\n      harness.element.value = 'Value';\n      // Test case.\n      await harness.deleteValue();\n      // Assertion.\n      expect(harness.element.value).toBe('');\n    });\n\n    it('should allow deleting part of the value', async () => {\n      // Setup.\n      const harness = await setupTest();\n      harness.element.value = 'Value';\n      // Test case.\n      await harness.deleteValue(1, 4);\n      // Assertion.\n      expect(harness.element.value).toBe('Ve');\n    });\n  });\n\n  describe('reset()', () => {\n    it('should set the value to an empty string', async () => {\n      // Setup.\n      const harness = await setupTest();\n      harness.element.value = 'Value';\n      // Test case.\n      await harness.reset();\n      // Assertion.\n      expect(harness.element.value).toBe('');\n    });\n\n    it('should call super.reset()', async () => {\n      // Setup.\n      const harness = await setupTest();\n      spyOn(Harness.prototype, 'reset');\n      // Test case.\n      await harness.reset();\n      // Assertion.\n      expect(Harness.prototype.reset).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('simulating change events', () => {\n    it('should dispatch change if value changes after focus and blur',\n       async () => {\n         // Setup.\n         const harness = await setupTest();\n         const changeHandler = jasmine.createSpy('changeHandler');\n         harness.element.addEventListener('change', changeHandler);\n         // Test case.\n         await harness.focusWithKeyboard();\n         await harness.inputValue('value');\n         await harness.blur();\n         // Assertion.\n         expect(changeHandler).toHaveBeenCalledTimes(1);\n       });\n\n    it('should not dispatch change if value does not change', async () => {\n      // Setup.\n      const harness = await setupTest();\n      const changeHandler = jasmine.createSpy('changeHandler');\n      harness.element.value = 'value';\n      harness.element.addEventListener('change', changeHandler);\n      // Test case.\n      await harness.focusWithKeyboard();\n      await harness.blur();\n      // Assertion.\n      expect(changeHandler).not.toHaveBeenCalled();\n    });\n\n    it('should not dispatch change if reset', async () => {\n      // Setup.\n      const harness = await setupTest();\n      const changeHandler = jasmine.createSpy('changeHandler');\n      await harness.focusWithKeyboard();\n      await harness.inputValue('value');\n      harness.element.addEventListener('change', changeHandler);\n      // Test case.\n      await harness.reset();\n      await harness.blur();\n      // Assertion.\n      expect(changeHandler).not.toHaveBeenCalled();\n    });\n  });\n});\n"]}